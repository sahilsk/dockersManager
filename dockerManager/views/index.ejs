<% include ../layouts/dashboard_layout_top %>


<% if( messages && typeof messages.errorList !== "undefined" && messages.errorList ){ %>

   	<ul class="flash" >
   		<% messages.errorList.forEach( function(item, index){ %> 
   				
   			<li class="<%= item.type %>" >
   				<%= item.text %>
				<span> &cross; </span>
			</li>

   		<%  }); %>
		
	</ul>

<% } %>

<h3> Upload docfile </h3>


<div class="uploaderWrapper">

      <div id='UploadArea'>

			<form method="post" enctype="multipart/form-data" action="/upload" >

				<label> Build Name </label>
					<input type="text" name="build_name"  id="build_name" pattern="[a-z0-9-_.]{3,30}" required title="Invalid repository name, only [a-z0-9-_.] are allowed and should have atmost 30 characters" />
				<br/> <br/>

				<input type="file" name="dockerfile" id="dockerfile" /> 
				
				 <!--
				<br/><br/>
				<span > --------------------------- OR ---------------------------</span>
				<br/><br/>
				 -->
				<div id="dropbox"  style="padding:15px; text-align:center; margin:0 auto; border: 1px dashed #ccc; background-color:#eee; color:#ccc;">
			    	Drop file here
			    </div>

				<Br/>
				<input type="submit" value="upload and build" id="UploadButton" class="btn lrg" />
			</form>
 
      </div>



</div>


<%= include /common/cmd_ux.ejs %>




<% include ../layouts/dashboard_layout_bottom %>

<script src="/primus/primus.io.js"></script>


<script>

	var server = Primus.connect('ws://localhost:3000/');

	server.on('open', function () {
	    server.send('Tango', 'hello world');
	    server.on('Charlie', function(d){
	    	console.log( "Handshake passed");
	    });
	});

	var dockerfile = server.resource('Dockerfile');
	dockerfile.on('ready', function () {

	  // start calling remote events
	  dockerfile.uploadAndBuild('calling uploadAndBuild', function (res) {

	  	server.send("onuploadAndBuild Resource", "from client");

	  	 server.on("onuploadAndBuild Resource", function(d){
	  	 		console.log(d);
 			  	server.send("onuploadAndBuild Resource", "from client");

	  	 });

	     console.log(res);
	  });

	});


	server.on('identifier', function (id) {
	    console.log("Client id :", id);
	});

	//-----------------------------

	$("#dockerfile").hide();
	$("#dropbox").bind("click", function () {
	    $("#dockerfile").click();
	})

	var dropbox;
	dropbox = document.getElementById("dropbox");
	dropbox.addEventListener("dragenter", dragenter, false);
	dropbox.addEventListener("dragover", dragover, false);
	dropbox.addEventListener("dragleave", dragleave, false);

	dropbox.addEventListener("drop", drop, false);

	function dragenter(e) {
	    console.log("dragenter");
	    e.stopPropagation();
	    e.preventDefault();
	    $(this).css({
	        'background-color': '#FFF',
	        color: 'purple'
	    });
	}

	function dragover(e) {
	    console.log("dragover");
	    e.stopPropagation();
	    e.preventDefault();
	}
	function dragleave(e) {
	    console.log("dragleave");
	    e.stopPropagation();
	    e.preventDefault();
	    $(this).css({
	        'background-color': '#eee',
	        color: '#333'
	    });
	}

	function drop(e) {
	    e.stopPropagation();
	    e.preventDefault();

	    if (e.dataTransfer.files.length > 0) {
	        var dt = e.dataTransfer;
	        var files = dt.files;
	        handleFile(files);
	    }
	}

	if (window.File && window.FileReader) {
	    $("#UploadButton").click(StartUpload);
	    $('#dockerfile').bind('change', FileChosen);
	} else {
	    $('#UploadArea').html("Your Browser Doesn't Support The File API Please Update Your Browser");
	}

	var SelectedFile = null;

	function FileChosen(evnt) {
	    handleFile(evnt.target.files);
	}
	function handleFile(files) {
	    SelectedFile = files[0];
	    $("#dropbox").text(SelectedFile.name);
	    console.log("HandleFile: ", SelectedFile.name);
	}

	/*==========  Socket ============= */
	var FReader;
	var Name;
	var buildName;

	function StartUpload(e) {
	    e.preventDefault();

	    var patt = new RegExp("^[a-z0-9-_.]{3,30}$");


	    buildName = $("#build_name").val();

	    if (!patt.test(buildName)) {
	        alert("Please provide valid build name [ [a-z0-9-_.]{3,30} ] ");
	        return;
	    }

	    if (SelectedFile !== null) {

	        $("#UploadArea").slideUp();

	        FReader = new FileReader();
	        var Content = "<div id='uploadResult'>  <span id='NameArea'>Uploading " + SelectedFile.name + "</span>";
	        Content += '<div id="ProgressContainer"><div id="ProgressBar">' + "<div id='uploadStatus'> <span id='percent'>0%</span>  <span id='Uploaded'> - <span id='MB'>0</span>/" + Math.round(SelectedFile.size / 1048576) + 'MB</span></div></div></div>';
	        Content += "</div>";
	        $(".uploaderWrapper").append(Content);
	        $("#uploadResult").append("<button class='btn lrg' id='reload'> Upload New File </button>");
	        $("#reload").click(function () {
	            $(this).parent().remove();
	            $("#UploadArea").slideDown();
	            $("#dropbox").html("Drop file here");
	            $("form").trigger("reset");
	        });

	        FReader.onload = function (evnt) {
	            server.send('Upload', {
	                Data: evnt.target.result,
	                    "buildName": buildName
	            });
	        }
	        server.send('Start', {
	            'Size': SelectedFile.size,
	                "buildName": buildName
	        });

	    } else {
	        alert("Please Select A File");
	    }
	}


	server.on('MoreData', function (data) {
	    UpdateBar(data['Percent']);
	    var Place = data['Place'] * 524288; //The Next Blocks Starting Position
	    var NewFile; //The Variable that will hold the new Block of Data
	    if (SelectedFile.slice) NewFile = SelectedFile.slice(Place, Place + Math.min(524288, (SelectedFile.size - Place)));
	    else NewFile = SelectedFile.mozSlice(Place, Place + Math.min(524288, (SelectedFile.size - Place)));
	    FReader.readAsBinaryString(NewFile);
	});

	function UpdateBar(percent) {
	    document.getElementById('ProgressBar').style.width = percent + '%';
	    document.getElementById('percent').innerHTML = (Math.round(percent * 100) / 100) + '%';
	    var MBDone = Math.round(((percent / 100.0) * SelectedFile.size) / 1048576);
	    document.getElementById('MB').innerHTML = MBDone;
	}


	server.on('Done', function (data) {
	    document.getElementById('percent').innerHTML = '100%';
	    var Content = "<span style='font-family: monospace; color: rgb(194, 152, 192);'> Dockerfile Successfully Uploaded !! </span>"
	    document.getElementById('ProgressBar').style.width = 100 + '%';
	    console.log(Content);
	    $("#uploadResult").append(Content);



	    server.send("start build", null);

	});

	server.on('build start', function (msg) {
	    $(".cmd_wrapper").eq(0).find("ul").append("<li class='alert'>" + msg + "</li>");

	});
	server.on('build progress', function (msg) {
	    if (!$(".cmd_wrapper ul").is(":visible")) $(".cmd_wrapper ul").show();
	    console.log(msg);

	    $(".cmd_wrapper").eq(0).find("ul").append("<li>" + msg + "</li>");
	    $(".cmd_wrapper ul").scrollTop($(".cmd_wrapper ul").eq(0).prop('scrollHeight'));

	});
	server.on('build error', function (msg) {
	    $(".cmd_wrapper").eq(0).find("ul").append("<li class='error'>" + msg + "</li>");
	    $(".cmd_wrapper ul").scrollTop($(".cmd_wrapper ul").eq(0).prop('scrollHeight'));

	});
	server.on('build end', function (msg) {
	    $(".cmd_wrapper").eq(0).find("ul").append("<li class='alert'>" + msg + "</li>");
	    $(".cmd_wrapper ul").scrollTop($(".cmd_wrapper ul").eq(0).prop('scrollHeight'));

	});


	$(".cmd_wrapper .toggle_display").click(function () {
	    $ul = $(this).next();
	    console.log($ul);
	    if ($ul.is(':visible')) {
	        $ul.hide();
	        console.log($ul);
	    } else $ul.show();


	});

</script>
